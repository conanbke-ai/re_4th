import numpy as np
# 실습 1 배열 초기화 및 생성
'''
1. 0으로 채워진 크기 (3, 4) 배열을 생성한 후, 모든 값을 5로 채우는 새로운 배열을 만드세요.
'''
array = np.full((3, 4), 5)
print(array)

# [[5 5 5 5]
#  [5 5 5 5]
#  [5 5 5 5]]
'''
2. 0부터 20까지 2씩 증가하는 1차원 배열을 생성하세요.
'''
array = np.arange(0, 21, 2)
print(array)    # [ 0  2  4  6  8 10 12 14 16 18 20]
'''
3. 0 ~ 1 사이의 실수 난수를 가지는 (2, 3) 크기의 배열을 생성하세요.
'''
array = np.random.uniform(low=0, high=1, size=(2, 3))
print(array)

# [[0.32792803 0.21500652 0.46293375]
#  [0.66784338 0.22991139 0.73757779]]

'''
4. 평균이 100, 표준편차가 20인 정규분포 난수 6개를 생성하새요.
'''
mean, std = 100, 20
randnum = mean + std * np.random.randn(6)
print(randnum)

# [ 87.10968554 140.12817661  86.04949491 101.42982091  92.22413302
#   47.70592223]

'''
5. 1부터 20까지의 정수를 포함하는 1차원 배열을 만들고, 이 배열을 (4, 5) 크기의 2차원 배열로 변환하세요.
'''
array1 = np.arange(1, 21)
array2 = array1.reshape(4, 5)
print(array2)

# [[ 1  2  3  4  5]
#  [ 6  7  8  9 10]
#  [11 12 13 14 15]
#  [16 17 18 19 20]]

'''
6. 0부터 1까지 균등 가격으로 나눈 12개의 값을 가지는 배열을 생성하고, 이를 (3, 4) 크기로 변환하세요.
'''
array1 = np.linspace(0, 1, 12)
array2 = array1.reshape(3, 4)
print(array2)

# [[0.         0.09090909 0.18181818 0.27272727]
#  [0.36363636 0.45454545 0.54545455 0.63636364]
#  [0.72727273 0.81818182 0.90909091 1.        ]]

'''
7. 0 ~ 99 사이의 난수로 이루어진 (10. 10) 배열을 생성한 뒤, np.eye()로 만든 단위 행렬을 더하여 대각선 요소가 1씩 증가된 배열을 만드세요.
'''
array = np.random.uniform(low=0, high=100, size=(10, 10))
array2 = np.eye(10, 10)
print(array + array2)

# [[2.31837882e+01 3.73342376e+00 6.98873816e+01 5.26333082e+01
#   5.79432273e+01 2.97234468e+01 1.38760095e+00 5.11125168e+01
#   9.95555417e+01 7.51422838e+01]
#  [9.24670745e+01 1.76215474e+01 3.10617746e+01 5.18192702e+01
#   3.87267384e+01 4.76861101e+01 9.54071725e+01 3.96975543e+01
#   5.08985242e+01 9.58462954e-02]
#  [4.24005478e+01 8.59016905e+01 9.83696834e+01 4.81021279e+01
#   3.26810481e+00 6.72469515e+01 6.24290744e+01 5.61172621e+01
#   3.30938105e+01 8.88103329e+01]
#  [4.13403738e+01 1.16871663e+01 9.91575945e+01 1.94970598e+01
#   4.83189086e+01 1.41923188e+01 3.77405626e+01 3.74399680e+01
#   6.84211786e+01 5.69426860e+01]
#  [9.41339386e+01 2.97628534e+01 7.29648257e+01 6.55159559e+00
#   8.24164300e+01 5.22478539e+01 7.38251924e+01 9.59933348e+01
#   5.72211268e+01 4.57128224e+01]
#  [1.04205023e+00 6.20083465e+01 2.20256075e+01 1.91256817e+01
#   4.09525985e+00 5.30308616e+01 7.92176824e+01 7.18726581e+01
#   1.72548480e+01 5.19564360e+01]
#  [6.51876797e+01 4.94747152e+01 2.12530980e+01 4.49946739e+01
#   8.32055518e+00 9.81169175e+01 7.86111300e+01 1.39225103e+01
#   6.93077298e+00 4.68293241e+01]
#  [8.83513857e+01 5.54446541e+00 1.16114868e+01 5.59130011e+01
#   9.08716347e+01 7.41387518e+01 3.80213534e+01 8.29835128e+01
#   1.92256212e+01 4.74418860e+01]
#  [1.04321454e+01 6.34943635e+01 7.53482523e+01 9.81795050e+01
#   5.26149700e+01 1.97970058e+01 5.51434382e+01 7.13651293e+01
#   6.93351106e+01 9.92841350e+01]
#  [2.69345793e+01 4.62636708e+01 2.29929388e+01 3.17128118e+01
#   4.66947155e+01 2.53001024e+01 5.93690713e+01 6.45878262e+00
#   5.87806665e+01 4.26134885e+01]]

'''
8. 0 ~ 9 사이의 난수로 이루어진 (2, 3, 4) 3차원 배열을 생성하세요.
'''
array = np.random.uniform(low=0, high=9, size=(2, 3, 4))
print(array)

# [[6.90372994 3.04733448 3.42707787 6.3416123 ]
#   [2.24849473 1.4306441  3.7276504  3.51423437]
#   [4.78752799 2.85551564 4.36963579 5.17625771]]]