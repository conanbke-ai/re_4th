'''
문자열 s가 주어졌을 때, s의 각 위치마다 자신보다 앞에 나왔으면서, 자신과 가장 가까운 곳에 있는 같은 글자가 어디 있는지 알고 싶습니다.
예를 들어, s="banana"라고 할 때,  각 글자들을 왼쪽부터 오른쪽으로 읽어 나가면서 다음과 같이 진행할 수 있습니다.

b는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
a는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
n은 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
a는 자신보다 두 칸 앞에 a가 있습니다. 이는 2로 표현합니다.
n도 자신보다 두 칸 앞에 n이 있습니다. 이는 2로 표현합니다.
a는 자신보다 두 칸, 네 칸 앞에 a가 있습니다. 이 중 가까운 것은 두 칸 앞이고, 이는 2로 표현합니다.
따라서 최종 결과물은 [-1, -1, -1, 2, 2, 2]가 됩니다.

문자열 s이 주어질 때, 위와 같이 정의된 연산을 수행하는 함수 solution을 완성해주세요.

* 제한사항
    - 1 ≤ s의 길이 ≤ 10,000
    - s은 영어 소문자로만 이루어져 있습니다.
'''
def solution(s):
    
    last_index = {}
    result = []

    for n, i in enumerate(s):
        if i not in last_index:
            result.append(-1)
        else:
            result.append(n - last_index[i])

        last_index[i] = n  # 마지막 위치 업데이트

    return result

# print(solution("banana"))

'''
예시1)
def solution(s):
    return [s[i::-1].find(s[i],1) for i in range(len(s))]

    '- .find() 함수에서 첫번째로 찾은 경우 첫 번쨰 등장 인덱스 반환되고, 못 찾는 경우 -1 반환됨'

    '   str.find(sub[, start[, end]])
            - sub : 찾고자 하는 문자열(필수)
            - start : 검색을 시작할 인덱스(선택, 기본값 0)
            - end : 검색을 종료할 인덱스(선택, 기본값 문자열 끝까지)'    
'''