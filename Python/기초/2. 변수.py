# 변수(Variable) -데이터를 담는 상자
'''
데이터를 저장할 수 있는 이름이 붙은 공간
- 변수 선언 : 변수를 처음으로 생성함
- 값 할당 : 변수에 값을 저장 (파이썬은 변수의 선언과 할당을 동시에 함)
- = : 대입 연산자, 변수에 값을 대입한다(할당한다)는 의미
    ex) 변수이름 = 값
'''

''' 
변수(Variable)란 무엇인가요?
- 게임 → 플레이어의 점수를 기억
- 쇼핑몰 → 상품의 가격을 저장
- SNS → 사용자의 이름을 기억

변수는 컴퓨터 메모리에서 데이터를 저장하는 공간입니다.
프로그램이 실행되는 동안 필요한 정보를 담아두는 역할을 합니다.
'''

''' 
변수를 상자에 비유해서 이해해보세요:
1. 상자(변수) = 데이터를 담는 공간
2. 물건(데이터) = 저장할 값 (숫자, 문자 등)
3. 이름표(변수명) = 상자를 구분하는 이름
4. 필요할 때 상자에서 물건을 꺼내 사용합니다.

예시: age라는 상자에 20이라는 숫자를 넣어두고,
      나중에 필요할 때 age 상자에서 20을 꺼내 사용
'''

#######################################################################
# 변수 특징 :
'''
- 변수에 할당된 값을 바꿀 수 있음(재할당 가능)
    파이썬은 동적 타입 언어이므로, 재할당 시 자료형도 바꿀 수 있음
- 변수에는 하나의 값만 저장 가능 (새로운 값을 할당하면 이전 값은 사라짐)
- 여러 바료를 여러 변수에 한 줄로 할당 가능
    좌측 변수에 각각 순서대로 대응하여 값이 할당됨
    비슷한 성질의 변수를 정리하는 데 유용
    복잡하거나 가독성 떨어질 경우, 비추천
'''
#######################################################################
# 변수명 규칙 :
'''
1. 영문자(a-z, A-Z), 숫자(0-9), 언더스코어(_)만 사용
2. 숫자로 시작할 수 없음 (1name ❌, name1 ⭕)
3. 공백(스페이스) 사용 불가 (my name ❌, my_name ⭕)
4. Python 예약어는 사용 불가 (if, for, while, class 등)
5. 대소문자를 구분함 (Name과 name은 다른 변수)
    - 프로그래밍 언어가 미리 정해놓은 특별한 의미를 가진 단어
        문법 구조 구성하기 위해 사용됨
        ex) if, else, for, while, def, return, class, import, True, False, None ...
6. 의미있고 명확한 이름 사용 권장
7. snake_case 방식 사용 (단어 사이를 언더스코어로 연결)
8. 상수는 대문자로 작성 (PI = 3.14159)
9. 클래스명은 PascalCase 사용 (MyClass)
10. 변수 값은 변경 가능함
    -> 재할당 가능
'''
# 불가능한 변수명
# ex) my-name = "김철수"

'''
식별자 종류
- 스네이크 케이스(Snake_Case)
ex) student_name = "김철수"

"""
Python에서 권장하는 변수명 작성법:
- 모든 글자를 소문자로 작성
- 단어와 단어 사이를 언더스코어(_)로 연결
- 의미가 명확하도록 서술적으로 작성
"""
# 좋은 변수명 예시 (snake_case)
student_name = "김철수"         # 학생 이름
user_age = 25                  # 사용자 나이
total_score = 100              # 총점
shopping_cart_items = 5        # 장바구니 아이템 수
is_login_successful = True     # 로그인 성공 여부

print(f"학생: {student_name}, 나이: {user_age}, 점수: {total_score}")


- 파스칼 케이스(PascalCase)
ex) StudentName

- 카멜 케이스(camelCase)
ex)studentName
'''

# ========================================
# 좋은 변수명 예시 - 의미를 명확하게 알 수 있음
# ========================================
age = 20                    # 나이를 저장하는 정수형 변수
student_name = "김철수"      # 학생 이름을 저장하는 문자열 변수
is_student = True           # 학생 여부를 저장하는 불린(참/거짓) 변수
total_score = 95.5          # 총점을 저장하는 실수형 변수
subject_count = 5           # 과목 수를 저장하는 정수형 변수

print(f"{student_name}님의 나이: {age}세")              # f-string을 사용한 출력
print(f"학생 여부: {is_student}")                      # 불린 값 출력
print(f"총점: {total_score}점, 과목 수: {subject_count}개")

# ========================================
# 나쁜 변수명 예시 - 의미를 알 수 없음
# ========================================

# 아래는 좋지 않은 변수명의 예시입니다
a = 24              # 'a'가 무엇을 의미하는지 알 수 없음
na = "김철수"       # 'na'가 이름인지 다른 것인지 불분명
x = True           # 'x'가 무엇을 나타내는지 모호함

# 위의 나쁜 변수명을 좋은 변수명으로 바꾼다면:
# a = 24         → student_age = 24
# na = "김철수"   → student_name = "김철수"
# x = True       → is_enrolled = True

# 올바른 변수명 예시
user_name = "홍길동"         # snake_case 사용
user_age = 25              # 의미가 명확함
MAX_RETRY_COUNT = 3        # 상수는 대문자로
is_valid_email = True      # 불린 변수는 is_, has_ 등으로 시작

# 잘못된 변수명 예시 (주석 처리하여 실행 방지)
# 1number = 10             # 숫자로 시작 불가능 ❌
# my-name = "김철수"        # 하이픈(-) 사용 불가능 ❌
# my name = "김철수"        # 공백 사용 불가능 ❌
# class = "A"              # Python 예약어 사용 불가능 ❌


age = 10
print(age)  # 10

age = 20
student_name = "김철수"
is_student = True

if (is_student):
    print("age = " + str(age) + ", student_name = " +
          student_name)  # age = 20, student_name = 김철수

x = 10
y = 20
print("x =", x, "y =", y)   # x = 10 y = 20


# ========================================
# 다중 할당과 변수 교환
# ========================================

# 여러 변수에 동시에 값 할당
x = 10
y = 20
print(f"교환 전 - x: {x}, y: {y}")

# 값의 교환 (Python의 편리한 기능!)
x, y = y, x  # 이것은 x, y = 20, 10과 같습니다
print(f"교환 후 - x: {x}, y: {y}")

# 한 번에 여러 변수에 다른 값들 할당
X, Y = 30, "a"
print(f"X: {X}, Y: {Y}")

# print 함수의 옵션들
# sep: 여러 값들 사이의 구분자 설정
# end: 줄바꿈 문자 설정 (기본값은 '\n')
print('X는', X, sep='   ', end='')  # 구분자를 공백 3개로, 줄바꿈 없이
print('Y는', Y)                    # 일반적인 출력


# 값의 교환, 여러 변수 할당
x, y = y, x
print("x =", x, "y =", y)   # x = 20 y = 10

# sep= : separator, 구분자 / 기본값 : " " (공백 한 칸)
#       print() 안에서 여러 값 출력 시, 값 사이에 들어가는 문자
# end= : 기본값 : "\n" (줄바꿈)
#      출력 후, 마지막에 붙는 문자
X, Y = 30, 'a'
print('X', X, sep='   ', end=' ')
print('Y', Y)
# X   30 Y a

# ========================================
# 추가 팁: 변수 사용 시 주의사항
# ========================================

"""
변수 사용 시 주의사항:
1. 변수를 선언하기 전에는 사용할 수 없습니다
2. 대소문자를 구분합니다 (name과 Name은 다른 변수)
3. 예약어(if, for, while 등)는 변수명으로 사용할 수 없습니다
4. 의미 있는 변수명을 사용하여 코드 가독성을 높이세요
"""

# 좋은 습관 예시
user_birth_year = 1995                    # 의미가 명확한 변수명
current_year = 2024
calculated_age = current_year - user_birth_year

print(f"출생년도: {user_birth_year}")
print(f"현재년도: {current_year}")
print(f"나이: {calculated_age}세")

print("\n" + "="*50)
print("Python 변수와 데이터 타입 학습 완료!")
print("="*50)
