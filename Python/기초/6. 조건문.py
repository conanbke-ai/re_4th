# ===========================
# 1. 비교 연산자 (x, y 값 비교)
# ===========================

x = 10
y = 20

# == : 두 값이 같으면 True, 다르면 False
print(f'x == y: {x == y}')  # 10과 20은 같지 않으므로 False

# != : 두 값이 다르면 True
print(f'x != y: {x != y}')  # 10과 20은 다르므로 True

# > : 왼쪽 값이 크면 True
print(f'x > y : {x > y}')   # 10은 20보다 작으므로 False

# >= : 왼쪽 값이 크거나 같으면 True
print(f'x >= y: {x >= y}')  # 10은 20보다 작으므로 False

# < : 왼쪽 값이 작으면 True
print(f'x < y : {x < y}')   # 10은 20보다 작으므로 True

# <= : 왼쪽 값이 작거나 같으면 True
print(f'x <= y: {x <= y}')  # 10은 20보다 작으므로 True

# x, y 값을 15로 다시 설정
x = 15
y = 15

print(f'x <= y: {x <= y}')  # 15는 15와 같으므로 True
print(f'x >= y: {x >= y}')  # 15는 15와 같으므로 True


# ===========================
# 2. 논리 연산자 (and, or, not)
# ===========================

# and : 양쪽 조건이 모두 True여야 True
print(True and True)    # 둘 다 True → True
print(True and False)   # 한쪽이 False → False
print(False and True)   # 한쪽이 False → False
print(False and False)  # 둘 다 False → False

# or : 둘 중 하나라도 True면 True
print(True or True)     # 둘 다 True → True
print(True or False)    # 하나가 True → True
print(False or True)    # 하나가 True → True
print(False or False)   # 둘 다 False → False

# not : True ↔ False 반전
print(f'not True : {not True}')     # True → False
print(f'not False : {not False}')   # False → True

# and, or 혼합
# (True and False) → False, False or True → True
print(True and False or True)
# (False or True) → True, (True and True) → True, True and False → False
print(True and (False or True) and False)


# ===========================
# 3. if 조건문 기초
# ===========================

age = 20

# age가 18 이상이면 성인 출력
if age >= 18:
    print("성인입니다.")


# ===========================
# 4. 문자열을 조건으로 사용
# ===========================

name = "ethan"
name = ""  # 빈 문자열로 바꿨으므로 False로 평가됨

# 문자열이 비어 있지 않으면 True → 출력
if name:
    print("이름이 존재합니다.")  # 출력되지 않음 (name은 "")


# ===========================
# 5. True / False 조건문
# ===========================

if True:
    print("무조건 실행")  # 항상 실행됨

if False:
    print("실행되지 않습니다.")  # 실행 안됨

if True:
    pass  # 실행할 코드가 없을 때 pass 사용
print('조건문관 상관없습니다.')  # if와 상관없이 항상 실행


# ===========================
# 7. 단축 평가 (short-circuit evaluation)
# ===========================

# and : 앞 조건이 False면 뒤 조건은 확인하지 않음
# 따라서 print("단축 평가")는 실행되지 않음
if False and print("단축 평가"):
    print('실행')

# or : 앞 조건이 False면 뒤 조건을 확인함
# print("단축 평가")가 실행되고, 그 결과 None(False 취급)이지만
# 마지막 True 때문에 조건문이 실행됨
if False or print("단축 평가") or True:
    print('실행')


# ===========================
# 8. if ~ else 기본
# ===========================

name = ""  # 빈 문자열 → False 취급됨

if name:
    print(f'이름은: {name}')
else:
    print('이름을 작성해주세요')  # 실행됨

if False:
    print('if 실행')
else:
    print('else 실행')  # 실행됨


# ===========================
# 10. if ~ elif ~ else (다중 조건문)
# ===========================

name = '철수'

if name == '김철수':
    print(f'김철수 입니다.')
elif name == '철수':
    print(f'철수 입니다.')
else:
    print('이름을 입력해주세요.')


# ===========================
# 11. 나이와 학년 조건문
# ===========================

age = 20
name = '철수'
grade = 2

# name이 빈 문자열이 아니므로 True → 출력됨
if name:
    print(f'이름: {name}')

# 나이가 20보다 큰지 검사
if age > 20:
    print('성인입니다.')
else:
    print('미성년자입니다.')  # age = 20이므로 else 실행

# 학년 검사
if grade > 3:
    print('3학년 입니다')
elif grade == 2:
    print('2학년 입니다')  # grade = 2이므로 실행
else:
    print('1학년 입니다')


if True:
    if True:
        if True:
            pass
        if True:
            pass
        if True:
            pass


# 조건문

'''
주어진 조건의 참/거짓 여부에 따라 프로그램의 실행 흐름을 분기시키는 제어문

* 조건문이 필요한 이류
    - 현실 세계의 상황을 코드로 표현하기 위해
    - 입력 값, 환경, 상태에 따라 유연하게 동작하는 프로그램을 만들기 위해
    - 프로그램의 로직을 분기 처리하여 효율적이고 논리적인 실행 흐름을 만들기 위해

* 기본 문법
    조건식이 Ture일 경우에만 특정 코드 블록 실행

    if 조건식:
        실행할 코드 블록(들여쓰기 필수!)

* 조건식의 평가
    조건식은 Boolean 값(True 또는 False)로 평가됨
    * False
        - False 자체
        - None
        - 숫자 0, 0.0
        - 빈 문자열"", 빈 리스트[], 빈 튜플(), 빈 딕셔너리{}
        - 이 외의 값 == True(Truthy 값)
'''

# 들여쓰기(Indentation)와 콜론(:)

'''
- 들여쓰기 : 파이썬은 중괄호 {} 대신 들여쓰기로 코드 블록 구분
        같은 블록에 속한 코드들을 그룹화
        콜론 다음 줄부터 들여쓰기를 적용한 모든 줄은 동일한 블록에 속함
        없다면, IndentationError 발생
        * 규칙
            - 공백 4칸 또는 Tab 1칸이 일반적
            - 한 블록 내에서는 일관성있게 써야 함
            - 코드 블록이 없는 경우, pass(아무것도 하지 않음) 사용
- 콜론 : 코드 블록의 시작을 알리는 신호
    없다면, SyntaxError 발생
- 코드 블록 : 조건이나 구조에 따라 함께 실행되어야 하는 코드들의 묶음

'''

if True:
    print(f'조건문이 True로 실행되었습니다.')
print(f'조건문과 연관없습니다.')

# 단축
if False and print("단축 평가"):
    print("False까지만 검사합니다.")

######################################################################################################
# 실습 1 날씨에 따른 준비물 안내

'''
오늘의 날씨에 따라 필요한 준비물이 달라짐
사용자에게 오늘의 날씨를 입력받고, 그에 따라 적절한 메시지를 출력하는 프로그램 만들기
* 조건
    - 입력값은 "비" 또는 "맑음" 중 하나
    - "비"라고 입력 시, "우산을 챙기세요!" 출력
    - "맑음"이라고 입력 시, "선크림을 바르세요!" 출력
'''

weather = input("오늘의 날씨를 입력해주세요. \n : ")

if (weather == ("비" or "맑음")):
    if (weather == "비"):
        print(f'오늘의 날씨는 {weather}입니다. 우산을 챙기세요!')
    elif (weather == "맑음"):
        print(f'오늘의 날씨는 {weather}입니다. 선크림을 바르세요!')
else:
    print("날씨는 비 또는 맑음으로 입력해주십시오.")


######################################################################################################
# if -else문

'''
조건이 참일 경우에는 if문의 코드 블록을 실행하고,
    거짓일 경우에는 else문의 코드 블록을 실행함

if 조건식 :
    조건이 참일 때, 실행할 코드
else :
    조건이 거짓일 때,실행할 코드

* 주의
    - else 에는 조건식을 쓸 수 없음
    - 들여쓰기가 잘못된 경우 블록 구분이 안되어 오류 발생
'''

age = 15

if age >= 18:
    print("성인입니다.")
else:
    print("미성년자입니다.")

# 미성년자입니다.

# if 문만 실행
if True:
    print("if 실행")
else:
    print("else 실행")

# else 문만 실행
if False:
    print("if 실행")
else:
    print("else 실행")

######################################################################################################
# 실습 2 짝수 홀수 판별하기

'''
정수를 입력 받아 짝수/홀수 여부를 판단하는 프로그램 만들기
    - "정수를 입력해 주세요." 라는 입력 설명문 띄우기
'''

num = int(input("정수를 입력해 주세요. \n : "))

if num % 2 == 0:
    print(f'{num}은 짝수입니다.')
else:
    print(f'{num}은 홀수입니다.')

######################################################################################################
# if -elif - else문

'''
복수의 조건을 순차적으로 검사하여 첫 번째로 참(True)인 조건의 코드 블록을 실행하는 조건문

- 그 이후의 조건은 검사하지 않음
- 모든 조건이 거짓인 경우, else 블록이 있다면 그것이 실행됨

if 조건식1 :
   if조건이 참일 때, 실행할 코드
elif 조건식2:
    if조건식이 거짓이고, elif조건식이 참일 때, 실행할 코드
else :
    위의 모든 조건이 거짓일 때,실행할 코드

* 주의
    - elif는 여러번 쓸 수 있지만, else는 한번만 가능
    - 조건이 True인 블록 하나만 시행함(이 후의 조건은 검사하지 않음)
    - else는 조건없이 반드시 마지막에 위치해야 함
    - elif 또는 else 없이 if만 사용 가능
    - if는 모든 조건을 각각 독립적으로 검사하고 여러 조건이 True이면 모두 실행함
        조건 간에 서로 배타적이지 않거나 중복 가능성이 있을 시 사용
    - elif는 위에서부터 순차적으로 검사하고 첫 번째 True 조건이 실행 시, 멈춤
        조건들이 서로 배타적이지 않을 때 사용
'''

######################################################################################################
# 실습 3 나이에 따른 영화 관람 가능 여부

'''
기준에 따라 사용자의 나이를 입력받아 관람 가능한 등급을 출력하는 프로그램 만들기

0~12세 : 전체 관람가
13~15세 : 12세 이상 관람가
16~18세 : 15세 이상 관람가
19세 이상 : 청소년 관람불가
'''

age = int(input("나이를 입력해주세요. \n : "))
grade = ""

if age < 0:
    print("나이를 잘못 입력하셨습니다.")
elif age <= 12:
    grade = "전체 관람가"
    print(f'{grade} 이용 가능합니다.')
elif age <= 15:
    grade = "12세 이상 관람가"
    print(f'{grade} 이용 가능합니다.')
elif age <= 18:
    grade = "15세 이상 관람가"
    print(f'{grade} 이용 가능합니다.')
else:
    grade = "청소년 관람불가"
    print(f'{grade} 이용 가능합니다.')

######################################################################################################
# 실습 4 시, 분, 초 구하기

'''
조건문을 이용해서 초를 입력하면서 시, 분, 초로 나누어 알려주는 프로그램 만들기
    - 변수를 만들고 정수를 입력받아 주세요.
    - 입력받은 변수의 값을 사용하여 변수 hour, minute, second에 알맞은 값을 저장하세요.
    - 조건에 따라 시, 분, 초를 출력해 주세요.
'''

sec = int(input("초를 입력하여 주십시오. \n : "))

if sec < 0:
    print("시간을 잘못 입력하였습니다.")
elif sec < 60:
    print(f'{sec}초입니다.')
elif (sec // 60) < 60:
    min = sec // 60
    sec %= 60
    print(f'{min}분 {sec}초입니다.')
else:
    min = (sec // 60) % 60
    hour = sec // (60**2)
    sec %= 60
    print(f'{hour}시 {min}분 {sec}초입니다.')

# ===========================
# 4. 시,분,초 구하기 / 에단 리더 답변
# ===========================

second = int(input('초를 입력해주세요.'))

# 시간을 구하는 식 (60초 * 60분) 1시간
if second >= 3600:
    print(f'{second // 3600} 시', end=' ')

second %= 3600

# 분을 구하는 식 (60초)
if second >= 60:
    print(f'{second // 60} 분', end=' ')

second %= 60

print(f'{second} 초')

######################################################################################################
# 중첩 조건문(Nested if)

'''
하나의 if 또는 else 블록 내부에 또 다른 if 문을 사용하는 구조

if 조건식1 :
   if 조건식2 :
    실행코드1
   else :
    실행코드2
else :
    실행코드3

* 주의
    - 중첩이 깊어질수록 코드가 복잡해짐(가독성 저하) → and 연산자 활용
    - 들여쓰기 오류 발생되기 쉬움 → 각 블록의 시작과 끝을 명확하게 구분
'''


######################################################################################################
# 실습 5 편의점 도시락 구매하기

'''
아래의 가격표를 참고하여 금액을 입력하고, 원하는 식품을 선택하면 해당 식품을 구매할 수 있는지 판단하여 출력하는 프로그램 만들기
    - 김밥 : 2500원
    - 삼각김밥 : 1500원
    - 도시락 : 4000원

* 프로그램 조건
    1. 먼저 금액을 입력받는다.
    2. 식품명을 입력받는다. (입력값: "김밥", "삼각김밥", "도시락")
    3. 입력한 금액이 선택한 식품의 가격 이상이면 구매에 성공한 메시지를 출력한다.
    4. 금액이 부족할 경우, "금액이 부족합니다."를 출력한다.
'''

coin = int(input("소지한 금액을 입력해주세요. \n : "))
food = input("식품명을 입력해주세요.('김밥', '삼각김밥', '도시락' 중 택 일) \n : ")
sum = 0


# 가격비교 함수
def compare(sum):
    if sum <= coin:
        print("구매 성공하였습니다. 감사합니다.")
    else:
        print("죄송합니다. 금액이 부족합니다.")


if food == "김밥":
    sum = 2500
    compare(sum)
elif food == "삼각김밥":
    sum = 1500
    compare(sum)
elif food == "도시락":
    sum = 4000
    compare(sum)
else:
    print("'김밥', '삼각김밥', '도시락' 중 택 일하여 입력하여 주십시오.")


# # ===========================
# # 5. 편의점 도시락 구매하기   / 에단 리더 답변
# # ===========================

price_kimbab = 2500
price_samgak = 1500
price_dosirak = 4000

money = int(input('금액을 입력해주세요:'))

food = input('구매할 식품을 입력하세요: (김밥, 삼각김밥, 도시락)')

if food == '김밥':
    if money >= price_kimbab:
        print('구매 성공')
    else:
        print('구매 실패')
elif food == '삼각김밥':
    if money >= price_samgak:
        print('구매 성공')
    else:
        print('구매 실패')
elif food == '도시락':
    if money >= price_dosirak:
        print('구매 성공')
    else:
        print('구매 실패')
else:
    print('잘못된 메뉴 입니다.')
