# 리스트(List)

'''
1. 이터러블(Iterable) 자료형
    - 반복(iteration)이 가능한 객체의 총칭
        for 루프에 사용할 수 있는 모든 객체
    - 컬렉션(Collection) 및 제너레이터(Generator)
        - 제너레이터(Generator) : 값을 하나씩 생성하며 반복 가능한(iterable) 객체를 만드는 함수

2. 컬렉션(Collection) 자료형
    - 여러 개의 데이터를 하나의 변수에 묶어서 저장할 수 있는 자료형
        "데이터의 묶음"을 다룰 수 있는 자료형을 총칭하는 용어
    - in, not in 연산자를 통해 포함 여부 확인
    - 반복문(for)을 통한 순회 가능
    - len()으로 길이 확인 가능

    * 주요 컬렉션 자료형
        - list(리스트) : 순서 있음 / 중복 허용 / 가변   ex) [1, 2, 3]
        - tuple(튜플) : 순서 있음 / 중복 허용 / 불변    ex) (1, 2, 3)
        - set(집합) : 순서 없음 / 중복 불허 / 가변  ex) {1, 2, 3}
        - dict(딕셔너리) : 키-값 쌍 저장 / 중복 키 불허 / 순서 있음(3.7+)   ex){'a':1, 'b':2}

3. 시퀀스(Sequence) 자료형
    - 항목이 순서대로 정렬된 데이터의 묶음
        컬렉션의 하위 개념(컬렉션 중 순서가 있는 자료형)
        list, tuple은 시퀀스이자 컬렉션 / set, dict는 컬렉션이지만 시퀀스는 아님
    - 여러 개의 값을 순서대로 나열한 자료형
        순서(인덱스)가 존재함
    
        * 특징
            - 순서 존재
            - 인덱싱 : 특정 위치의 요소를 정수형 인덱스로 접근 가능
            - 슬라이싱 : 시퀀스의 일부분을 잘라서 새로운 시퀀스를 만들 수 있음
            - 반복 가능 : for문을 이용하여 각 요소를 순차적으로 순회(iterate)할 수 있음
        
        * 종류
            - str : 문자들의 시퀀스(문자열) / 불변
            - list : 요소들의 시퀀스, 다양한 자료형 가능 / 가변
            - tuple : 요소들의 시퀀스, 불변형 리스트 / 불변
            - range : 정수 시퀀스 생성 / 불변
'''

'''
리스트(List)
    여러 값들을 순서대로 저장할 수 있는 자료형
    인덱스로 각 항목에 접근할 수 있으며, 요소의 추가/삭제/수정이 자유로움
    
    * 특징
        - 순서 유지 : 요소가 입력된 순서대로 저장되고 유지됨
        - 중복 허용 : 동일한 값이 여러 개 존재할 수 있음
        - 다양한 자료형 저장 가능 : 정수, 실수, 문자열, 리스트 등 어떤 자료형도 저장 가능
        - 가변 객체(Mutable) : 요소의 추가, 삭제, 수정이 가능함
'''

# 사용 예제

# 빈 리스트
리스트이름1 = []

# 문자열만 저장
리스트이름2 = ["저장할 자료1", "저장할 자료2", "저장할 자료3"]

# 여러 자료형 저장
리스트이름3 = [10, "hello", 3.14, [1, 2, 3]]

'- 리스트는 대괄호 []로 표현됨'
'- 각 요소는 쉼표(,)로 구분'
'- 다양한 자료형 저장 가능'

# 빈 리스트
리스트이름1 = list()

# 문자열을 리스트로
문자열_리스트 = list("codingon")

print(리스트이름1)  # []
print(문자열_리스트)    # ['c', 'o', 'd', 'i', 'n', 'g', 'o', 'n']

######################################################################################################
# 인덱싱(Indexing)

'''
시퀀스 자료형에서 특정 위치(인덱스) 값을 조회하는 것
    - 인덱스는 0부터 시작
    - 음수 인덱스 사용 시, 뒤에서부터 역순으로 접근 가능

    * 기본 문법
        시퀀스이름[인덱스]
'''

# 사용 예제

text = "Python"
print(text[0])  # P
print(text[3])  # h
print(text[-1])  # h
print(text[-3])  # h

text[0] = "F"   # 에러발생 → 수정 불가

'- 문자열은 불변 자료형이므로 인덱스를 통한 수정은 불가능함'

fruits = ["apple", "banana", "cherry"]
print(fruits[0])    # apple
print(fruits[-1])   # cherry
fruits[1] = "orange"    # 인덱스를 통한 수정 가능
print(fruits)   # ["apple", "orange", "cherry"]

'- 리스트는 가변 자료형이므로 인덱스를 통한 수정이 가능함'

######################################################################################################
# 슬라이싱(Slicing)

'''
시퀀스에서 특정 구간을 잘라내어 부분적으로 추출하는 방법
    - 원본은 변경되지 않으며, 새로운 시퀀스를 생성함
    - start : 시작 인덱스(포함) / end : 끝 인덱스(불포함)
    - step : 간격(양수/음수 가능)

    * 기본 문법
        시퀀스[start:end]   # step 생략 가능
        시퀀스[start:end:step]
'''

# 사용 예제 - 문자열
text = "Python"
print(text[0:2])    # Py    (0 ~ 1)
print(text[:3])     # Pyt   (0 ~ 2)
print(text[3:])     # hon   (3 ~ 끝)
print(text[:])      # 전체복사
print(text[::-1])   # 문자열 뒤집기

'- start 생략 시, 첫번째 요소부터 슬라이싱'
'- end 생략 시, 마지막 요소까지 슬라이싱'
'- start, end 모두 생략 시, 전체 문자열 복사'
'- step 에 -1 사용 시, 역순으로 전체 문자열 복사'

# 사용 예제 - 리스트
numbers = [10, 20, 30, 40, 50]
print(numbers[1:4])  # [20, 30, 40]
print(numbers[:3])  # [10, 20, 30]
print(numbers[::2])  # [10, 30, 50]
print(numbers[::-1])  # [50, 40, 30, 20, 10] 리스트 뒤집기

numbers = [1, 2, 3, 4, 5]
numbers[1:4] = [20, 30]  # 일부 구간을 다른 값으로 대체
print(numbers)  # [1, 20, 30, 5]

######################################################################################################
# 실습 1 인덱싱, 슬라이싱 복습문제

'''
1. 첫번째 요소와 마지막요소 출력하기
    다음 리스트에서 첫번째 요소와 마지막요소를 출력하세요.
    nums = [10, 20, 30, 40, 50]
'''
# 리스트 선언
nums = [10, 20, 30, 40, 50]
# 리스트의 첫번째 요소와 마지막 요소 출력
print(nums[0], nums[-1])

# 10 50

'''
2. 가운데 세 개의 요소 추출하기
    다음 리스트에서 가운데 3개의 요소만 슬라이싱하여 새 리스트로 만들어 출력하세요.
    nums = [100, 200, 300, 400, 500, 600, 700]
'''

# 리스트 선언
nums = [100, 200, 300, 400, 500, 600, 700]
# 가운데 인덱스 계산
midIdx = len(nums)//2
# 가운데 3개 요소 출력
print(nums[midIdx: midIdx + 3])

# [300, 400, 500]

'''
3. 리스트의 원소 2배로 출력하기
    다음 리스트의 모든 요소를 2배하여 출력하세요.
    nums = [1, 2, 3, 4, 5]
'''

# 리스트 선언
nums = [1, 2, 3, 4, 5]
# 반복문
for i in range(0, len(nums)):   # 리스트 길이만큼 반복
    # 각 요소 값 2배 처리
    nums[i] *= 2

# 리스트 출력
print(nums)

# [2, 4, 6, 8, 10]

'''
4. 리스트 뒤집어서 출력하기
    다음 리스트를 역순으로 슬라이싱하여 출력하세요.
    items = ["a", "b", "c", "d", "e"]
'''

# 리스트 선언
items = ["a", "b", "c", "d", "e"]
# 역순으로 출력
print(items[::-1])

# ['e', 'd', 'c', 'b', 'a']

'''
5. 짝수 인덱스 요소만 출력하기
    다음 리스트에서 짝수 인덱스(0, 2, 4 ...)의 요소들만 출력하세요.
    data = ["zero", "one", "two", "three", "four", "five"]
'''

# 리스트 선언
data = ["zero", "one", "two", "three", "four", "five"]
# 짝수 인덱스만 출력
print(data[::2])

# ['zero', 'two', 'four']


'''
6. 슬라이싱으로 리스트 수정하기
    다음 리스트에서 "어벤져스", "라라랜드"를 "매트릭스", "타이타닉"으로 수정하세요.
    movies = ["인셉션", "인터스텔라", "어벤져스", "라라랜드", "기생충"]
'''

# 리스트 선언
movies = ["인셉션", "인터스텔라", "어벤져스", "라라랜드", "기생충"]
# 리스트 수정
movies[2:4] = ["매트릭스", "타이타닉"]
# 리스트 출력
print(movies)

# '인셉션', '인터스텔라', '매트릭스', '타이타닉', '기생충']

'''
7. 특정 규칙에 따라 요소 추출
    다음 리스트에서 "물리", "생물", "지구과학"만 순서대로 추출하여 새 리스트로 출력하세요.
    subjects = ["국어", "수학", "영어", "물리", "화학", "생물", "역사", "지구과학", "윤리"]
'''

# 리스트 선언
subjects = ["국어", "수학", "영어", "물리", "화학", "생물", "역사", "지구과학", "윤리"]
# "물리", "생물", "지구과학" 순서대로 추출
print(subjects[3::2])

# ['물리', '생물', '지구과학']

'''
8. 리스트를 3개 구간으로 나누어 역순으로 병합
    다음 리스트에서 [1~3번째 요소] + [4~6번째 요소] + [7~9번째 요소] 순서로 3개의 구간으로 나눈 뒤,
        각 구간을 역순으로 따로 출력하세요.
        단, 출력 시 한 줄로 출력하세요.
    data = ["A","B","C","D","E","F","G","H","I",]
'''

# 리스트 선언
data = ["A", "B", "C", "D", "E", "F", "G", "H", "I"]
# 구간 나누기
data1 = data[:3]
data2 = data[3:6]
data3 = data[6:]
# 각 구간 역순으로 출력
print(data1[::-1], data2[::-1], data3[::-1])

# ['C', 'B', 'A'] ['F', 'E', 'D'] ['I', 'H', 'G']


######################################################################################################
# 리스트 요소 삭제 -del

'''
파이썬 내장 키워드로 객체를 삭제(delete) 하는 데 사용
    del : 범용 삭제 키워드 : 리스트의 요소 뿐 아니라, 변수 자체, 딕셔너리의 키, 객체 속성 등도 삭제 가능

    * 기본 문법
        del 리스트[인덱스]      # 특정 요소 1개 삭제
        del 리스트[ster:end]    # 슬라이싱 범위 삭제
        del 리스트              # 리스트 전체 객체 삭제
'''

# 사용 예제 - 슬라이싱 범위 삭제
fruits = ["apple", "banana", "cherry", "date"]
del fruits[1:3]
print(fruits)   # ['apple', 'date']

# 사용 예제 - 전체 리스트 객체 삭제
my_list = [1, 2, 3]
del my_list
print(my_list)  # NameError: name 'my_list' is not defined

######################################################################################################
# 리스트 연산

'''
1. 리스트 연결(+)
    + 연산자로 두 리스트를 이어붙여 하나의 새로운 리스트 생성
        원본 리스트는 변경되지 않고, 새로운 리스트 객체가 만들어짐
    
    * 기본 문법
        리스트 + 리스트
'''

# 사용 예제
a = [1, 2, 3]
b = [4, 5, 6]
c = a + b
print(c)    # [1, 2, 3, 4, 5, 6]

'- 연산 결과 새로운 리스트 반환'

'''
2. 리스트 반복(*)
    * 연산자로 지정한 횟수만큼 반복하여 새로운 리스트를 생성
        원본 리스트는 변경되지 않고, 새로운 리스트 객체가 만들어짐
        반복된 리스트의 요소들은 원래 순서를 유지함
        
    * 기본 문법
        리스트 * 정수
'''

# 사용 예제
a = [1, 2, 3]
b = a * 3
print(b)    # [1, 2, 3, 1, 2, 3, 1, 2, 3]

'- 반복하는 배열의 요소들의 순서는 변하지 않음'
'- 연산 결과 새로운 리스트 반환'

'''
3. 포함 여부 검사(in / not in)
    특정 요소가 리스트에 존재하는 지 인
'''

# 사용 예제
fruits = ["apple", "banana", "cherry"]
print("apple" in fruits)    # True
print("grape" not in fruits)    # True


######################################################################################################
# 실습 2 리스트 연산 복습문제

'''
1. 부분 삭제 후 연결
    다음 리스트 가운데 3개 요소 ("banana", "cherry", "grape")를 삭제한 뒤,
    나머지 앞/뒤 리스트를 연결하여 새 리스트 result를 출력하세요.

    fruits = ["apple", "banana", "cherry", "grape", "watermelon", "strawberry"]
'''

# 리스트 선언
fruits = ["apple", "banana", "cherry", "grape", "watermelon", "strawberry"]

# 가운데 인덱스
minIdx = len(fruits)//2 - 1

# 가운데 3개 요소 삭제
del fruits[minIdx: minIdx + 3]

# 리스트 출력
print(fruits)

# ['apple', 'watermelon', 'cherry']

'''
2. 반복 리스트 내부 요소 삭제
    다음 리스트를 3번 반복한 후, 전체 결과에서 중간에 있는 "A"만 삭제하세요.

    letters = ["A", "B"]
'''

# 리스트 선언
letters = ["A", "B"]

# 리스트 3번 반복
letters *= 3

# 가운데 인덱스 계산
midIdx = len(letters)//2 - 1

# letters 길이만큼 반복
for i in range(0, len(letters)):
    # 요소 값이 "A"인 경우
    if letters[i] == "A":
        # 요소 인덱스가 가운데 값인 경우
        if i == midIdx:
            # 해당 요소 삭제
            del letters[midIdx]
            # 반복 종료
            break

# 리스트 출력
print(letters)

######################################################################################################
# 주요 메서드

'''
1. len() 함수 : 길이(요소 개수) 제한
    시퀀스나 컬렉션 자료형의 요소 개수 반환 
'''

# 사용 예제
numbers = [10, 20, 30, 40]
print(len(numbers))  # 4

text = "Hello"
print(len(text))    # 5

'''
2. append(x) 함수 : 리스트 끝에 요소 추가
    리스트 마지막에 하나의 요소를 추가함
'''

# 사용 예제
fruits = ["apple", "banana"]
fruits.append("cherry")
print(fruits)   # ['apple', 'banana', 'cherry']

'''
3. extend(iterable) : 리스트 끝에 여러 요소 추가
    다른 리스트나 이터러블의 모든 요소를 추가함
'''

# 사용 예제
fruits = ["apple", "banana"]
fruits.extend(["cherry", "date"])
print(fruits)   # ['apple', 'banana', 'cherry', 'date]

'''
4. insert(index, x) : 원하는 위치에 요소 삽입
    지정한 인덱스에 요소 삽입
'''

# 사용 예제
numbers = [1, 2, 4]
numbers.insert(2, 3)    # 2번 인덱스에 3 삽입
print(numbers)  # [1, 2, 3, 4]

'''
5. remove(x) : 특정 값을 찾아 삭제
    가장 처음 발견된 해당 값(x) 삭제
'''

# 사용 예제
numbers = [1, 2, 3, 2, 4]
numbers.remove(2)
print(numbers)  # [1, 3, 2, 4]

'''
6. pop(index) : 인덱스 요소를 꺼내고 삭제
    인덱스를 지정하면 해당하는 인덱스의 요소를 삭제하고 반환함
    인덱스를 지정하지 않으면 마지막 요소를 삭제하고 반환함
'''

# 사용 예제
numbers = [10, 20, 30]
print(numbers.pop())  # 30
print(numbers)  # [10, 20]

print(numbers.pop(0))   # 10
print(numbers)  # [20]

'''
7. 리스트 정렬 : sort(), sorted()
    list.sort() : 원본 리스트 정렬
    sorted(list) : 정렬된 새로운 리스트 반환

    - 기본 : 오름차순 정렬 / reverse = True 옵션 시 내림차순 정렬
'''

# 사용 예제
# sort()
numbers = [3, 1, 2]
numbers.sort()
print(numbers)  # [1, 2, 3]
numbers.sort(reverse=True)
print(numbers)  # [3, 2, 1]

# sorted()
scores = [88, 95, 70]
sorted_scores = sorted(scores)
sorted_scores_r = sorted(scores, reverse=True)
print(sorted_scores)    # [70, 88, 95]
print(sorted_scores_r)  # [95, 88, 70]
print(scores)           # [88, 95, 70]

'''
8. reverse() : 리스트 요소 뒤집기
    리스트 자체를 뒤집음(원본 변경)
'''

# 사용 예제
numbers = [1, 2, 3]
numbers.reverse()
print(numbers)  # [3, 2, 1]

'''
9. count(x) : 값의 개수 세기
    값(x)의 개수를 세서 반환
'''

# 사용 예제
numbers = [1, 2, 2, 3, 2]
print(numbers.count(2))  # 3

'''
10. max(x), min() : 최대/최소값 찾기
'''

# 사용 예제
scores = [88, 95, 70, 100, 65]
print(max(scores))  # 100
print(min(scores))  # 65

'''
11. sum() : 요소들의 합 구하기
'''

# 사용 예제
scores = [88, 95, 70]
print(sum(scores))  # 253

######################################################################################################
# 실습 3 리스트 주요 메서드 복습 문제

'''
1. 기차 탑승 시뮬레이션
    기차에 승객들이 순서대로 탑승하고 있습니다.
        1. 처음엔 ["철수", "영희"]가 탑승했습니다.
        2. 그 다음 역에서 ["민수", "지훈"]이 함께 탑승했습니다.
        3. 다음 역에서 "영희"는 내렸습니다.
        4. "수진"이 1번 자리에 끼어 탑승했습니다.
        5. 마지막 역에서 "민수"가 내렸고, 기차 안의 순서를 뒤집었습니다.
    현재 기차 안에는 어떤 승객들이 어떤 순서로 앉아 있을까요?
'''

# 리스트 선언
customer_list = []

print("1. 첫 번째 역입니다. 철수와 영희가 탑승하였습니다.")
customer_list.extend(["철수", "영희"])

print("2. 두 번째 역입니다. 민수와 지훈이 탑승하였습니다.")
customer_list.extend(["민수", "지훈"])

print("3. 세 번째 역입니다. 영희가 하차하였습니다.")
customer_list.remove("영희")

print("4. 네 번째 역입니다. 수진이 1번 자리에 탑승하였습니다.")
customer_list.insert(0, "수진")

print("5. 다섯 번째 역입니다. 민수가 하차하였습니다.")
customer_list.remove("민수")

print("6. 기차 안의 순서가 뒤집어졌습니다.")
customer_list.reverse()

print("최종 승객 리스트 : ", customer_list)

# 1. 첫 번째 역입니다. 철수와 영희가 탑승하였습니다.
# 2. 두 번째 역입니다. 민수와 지훈이 탑승하였습니다.
# 3. 세 번째 역입니다. 영희가 하차하였습니다.
# 4. 네 번째 역입니다. 수진이 1번 자리에 탑승하였습니다.
# 5. 다섯 번째 역입니다. 민수가 하차하였습니다.
# 6. 기차 안의 순서가 뒤집어졌습니다.
# 승객 리스트 :  ['지훈', '철수', '수진']

'''
2. 숫자 처리 게임
    숫자 카드 게임에서 다음 리스트가 주어졌습니다. [5, 3, 7]
        1. 2장을 더 추가해서 [4, 9]가 들어옵니다.
        2. 가장 큰 수와 가장 작은 수를 각각 구해 출력하세요.
        3. 총 합을 출력하세요.
        4. 리스트를 정렬한 다음, 마지막 숫자를 제거하세요.
        5. 최종 리스트를 출력하세요.
'''

# 리스트 선언
numbers = [5, 3, 7]
# 리스트 추가
numbers.extend([4, 9])

# 리스트 출력
print("가장 큰 수 : ", max(numbers), ", 가장 작은 수 : ", min(numbers))
print("총 합 : ", sum(numbers))

# 리스트 정렬
numbers.sort()
# 리스트의 마지막 요소 제거
numbers.pop()

# 리스트 출력
print(numbers)

# 가장 큰 수 :  9 , 가장 작은 수 :  3
# 총 합 :  28
# [3, 4, 5, 7]
