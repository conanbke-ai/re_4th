[RPG 게임 만들기]

* 프로젝트 시나리오
    1. 플레이어는 자신의 캐릭터를 선택한 후, 적 캐릭터를 선택하여 전투를 진행한다.
        • 캐릭터: 전사, 마법사, 도적
    2. 전투 방식
        • 턴 기반 전투 시스템으로 진행한다
        • 기본 공격과 특수 공격을 사용할 수 있다.
        • 전투의 선공(첫 번째 공격자)을 랜덤으로 결정한다.
    3. 승리 시 새로운 적을 선택하여 전투를 계속 진행할 수 있으며, 패배 시 게임이 종료된다.

* 폴더 구조 예시
- 각 기능을 모듈로 분리해서 구현
- game.py
- battle/__init__.py, battle_manager.py
- characters/__init__.py, character.py, mage.py, rogue.py, warrior.py, affinity.py
- exceptions/__init__.py, errors.py
- utils/__init__.py, helpers.py

######################################################################################################

* __init__ 의 활용
    1. 패키지가 import될 때 초기화 코드 실행 가능
    2. from characters import Warrior, Mage, Rogue 처럼 간단한 import 가능
    3. 패키지 초기화 시 필요한 설정(공통 로깅, 상수 로드 등)을 한 곳에서 처리 가능

# characters/__init__.py
from .warrior import Warrior
from .mage import Mage
from .rogue import Rogue

__all__ = ["Warrior", "Mage", "Rogue"]

# game.py
from characters import Warrior, Mage, Rogue
from battle import BattleManager

######################################################################################################

* Character(추상 클래스)
1. 인스턴스 변수:
    • name : 캐릭터 이름
    • health : 체력
    • max_health : 최대 체력
    • attack_power : 공격력
    • mana : 마나
    • max_mana : 최대 마나
    • level : 캐릭터 레벨
    • start_effects : 상태 이상 리스트
    • items : 장착 아이템 리스트
    • skills : 기본 스킬 리스트


2. 인스턴스 메서드:
    • is_alive(self) : 체력이 0 이하이면 false 반환
    • basic_attack(self, target) : 기본 공격
    • special_attack(self, target) : 특수 공격(추상 메서드)
    • take_turn(self, target, is_player=Ture) : 캐릭터 턴 수행(추상 메서드)
    • take_damage(self, damage) : 피해를 입으면 체력이 감소(0 이하로 떨어지지 않음)
    • show_status(self) : 캐릭터 정보(이름, 레벨, 체력/최대 체력, 마나/최대 마나, 상태이상)를 출력
    • reset_all(self) : 캐릭터의 체력, 마나, 상태 이상 모두 초기화
    • get_name(self) : 캐릭터의 이름 반환
    • get_status_dic(self) : 캐릭터 상태를 딕셔너리로 반환
    • heal(self, amount) : 체력 회복
    • equip_item(self, item) : 아이템 장착 
    • level_up(self) : 레벨 업
    • take_turn(self, target) : 턴 수행
    • apply_status(self) : 턴 시작 후, 상태 이상 처리

######################################################################################################

* 클래스 별 기본값(예시)

캐릭터          체력    공격력(ATK)     특수능력
전사(Warrior)   100     15          특수 공격 시 2배 공격력(단, 본인 체력 5 감소)
마법사(Mage)    80      18          마나 100, 특수 공격 시 1.5배 공격력(마나 20 소모)
도적(Rogue)     90      12          특수 공격(급습) 확률 70%(성공 시 3배 공격력)

- 실제 기본값은 생성자를 통해 초기화
- 위 기본값은 예시이며, 임의로 기호에 맞게 설정할 것

* 상성 (각 상성과 전투 시, 20% 데미지 상승)
    전사 > 도적
    도적 > 마법사
    마법사 > 전사

1. 전사(Warrior) 클래스
    - Character 클래스 상속
    - 특수 공격 : "강력한 일격" (power_strike)
                2배의 공격력을 가하지만, 본인도 5의 체력을 잃음

2. 마법사(Mage) 클래스
    - Character 클래스 상속
    - 추가 인스턴스 변수 : mana(마나, 기본값 100)
    - 특수 공격 : "파이어볼" (fireball)
                마나 20을 소모하여 1.5배의 공격력으로 공격
                마나 부족 시 예외 발생(예외 처리 필요)

3. 도적(Rogue) 클래스
    - Character 클래스 상속
    - 특수 공격 : "급습" (ambush)
                랜덤 모듈을 이용해서 70% 확률로 3배 데미지를 입힘(랜덤 확률 시스템 활용)
                실패 시 공격하지 않음

######################################################################################################

* 전투 관리 시스템(BattleManager)
    - 인스턴스 메서드 : start_battle 구현
    - 전투 흐름
        - 랜덤 모듈을 이용하여 전투의 선공(첫 번째 공격자)를 랜덤으로 결정한다.
        - 첫 번째 캐릭터가 공격
        - 두 번째 캐릭터가 살아있으면 반격
        - 한 캐릭터의 체력이 0이 되면 전투 종료
        - 타임 모듈을 이용해서, 전투 진행 시 딜레이를 추가하여 더 자연스러운 전투를 연출한다.
    - 기본 공격 vs 특수 공격 선택
        - 랜덤 모듈을 통해 70% 확률로 기본 공격, 30% 확률로 특수 공격(예외 발생 가능)
    - 예외 처리
        - 마나 부족 시 공격 불가

######################################################################################################

* 게임 실행 흐름
    - 캐릭터 선택 함수 구현 : choose_character(prompt)
        1) 사용자가 자신의 캐릭터 선택
        2) 사용자가 상대 캐릭터 선택
        ※ while문 이용
    - BattleManager 클래스의 start_battle 로 전투 실행
    - 플레이어가 승리하면 새로운 적을 선택하여 전투 진행 가능 (y/n 입력으로 선택 가능)
        ※ while문 이용
    - 승리 시, 레벨업 1 증가, 최대 체력 및 공격력 증가, 일정 확률로 이벤트(아이템 드롭/상태 이상 등) 발생
    - 패배 시 게임 종료

######################################################################################################

* 추가 계발 계획
- 레벨업 효과 직업별로 다르게 설계
- 난이도 명시
- 적 레벨업으로 난이도 상향 기능

######################################################################################################

* 주의사항
- 실행 전 반드시 wcswidth 설치해야 함
    ex) pip install wcswidth